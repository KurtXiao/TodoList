{"ast":null,"code":"import { SET_DISPLAY_CONDITIONS, FILTER_DISPLAY } from '../actions/actionTypes';\nimport { filterEvents } from '../utils/redux';\n\nfunction displayArea() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_DISPLAY_CONDITIONS:\n      if (action.content.conditions === '') return state;\n      return Object.assign({}, state, action.content);\n\n    case FILTER_DISPLAY:\n      let newState = JSON.parse(JSON.stringify(state));\n      let newEvents = filterEvents(newState.conditions, action.content.allEvents);\n      newState.events = newEvents;\n      return newState;\n\n    default:\n      return state;\n  }\n}\n\nexport default displayArea;","map":{"version":3,"sources":["/Users/zechuanxiao/Documents/Vanderbilt/Junior/Projects/DoListGo/TodoListN/src/reducers/displayArea.js"],"names":["SET_DISPLAY_CONDITIONS","FILTER_DISPLAY","filterEvents","displayArea","state","action","type","content","conditions","Object","assign","newState","JSON","parse","stringify","newEvents","allEvents","events"],"mappings":"AAAA,SAASA,sBAAT,EAAiCC,cAAjC,QAAuD,wBAAvD;AACA,SAASC,YAAT,QAA6B,gBAA7B;;AAEA,SAASC,WAAT,GAA2C;AAAA,MAAtBC,KAAsB,uEAAd,IAAc;AAAA,MAARC,MAAQ;;AACvC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKN,sBAAL;AACI,UAAGK,MAAM,CAACE,OAAP,CAAeC,UAAf,KAA8B,EAAjC,EAAqC,OAAOJ,KAAP;AACrC,aAAOK,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,KAAlB,EAAyBC,MAAM,CAACE,OAAhC,CAAP;;AACJ,SAAKN,cAAL;AACI,UAAIU,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeV,KAAf,CAAX,CAAf;AACA,UAAIW,SAAS,GAAGb,YAAY,CAACS,QAAQ,CAACH,UAAV,EAAsBH,MAAM,CAACE,OAAP,CAAeS,SAArC,CAA5B;AACAL,MAAAA,QAAQ,CAACM,MAAT,GAAkBF,SAAlB;AACA,aAAOJ,QAAP;;AACJ;AACI,aAAOP,KAAP;AAVR;AAYH;;AAED,eAAeD,WAAf","sourcesContent":["import { SET_DISPLAY_CONDITIONS, FILTER_DISPLAY } from '../actions/actionTypes';\nimport { filterEvents } from '../utils/redux';\n\nfunction displayArea(state = null, action) {\n    switch(action.type) {\n        case SET_DISPLAY_CONDITIONS:\n            if(action.content.conditions === '') return state;\n            return Object.assign({}, state, action.content);\n        case FILTER_DISPLAY:\n            let newState = JSON.parse(JSON.stringify(state));\n            let newEvents = filterEvents(newState.conditions, action.content.allEvents);\n            newState.events = newEvents;\n            return newState;\n        default:\n            return state;\n    }\n}\n\nexport default displayArea;"]},"metadata":{},"sourceType":"module"}